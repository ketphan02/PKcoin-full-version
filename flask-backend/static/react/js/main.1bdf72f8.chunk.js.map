{"version":3,"sources":["Routes/Header/Header.jsx","Routes/Cards/Card.jsx","Routes/Home/Home.jsx","Routes/App/App.jsx","serviceWorker.js","index.js"],"names":["Header","className","href","Card","props","hmm","blockNo","id","PrevHash","CurHash","key","time","Home","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oSAOeA,G,YAEf,WACE,OACE,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,mBAEX,iCACI,uBAAGC,KAAK,KACR,8CCVDC,MAEf,SAAcC,GAEZ,IAAIC,EAAM,GACW,GAAjBD,EAAME,UAERD,EAAM,mBAGR,OAEE,yBAAKJ,UAAU,OAAOM,GAAIH,EAAME,QAAU,GACtC,mCACA,sCAAYF,EAAME,QAAlB,KADA,IACkCD,GAElC,oDACa,6BAAUD,EAAMI,SAC7B,6BAAS,6BAFT,eAGY,6BAAUJ,EAAMK,SAE5B,0CACG,6BAAUL,EAAMM,KAEnB,qDACS,6BAAUN,EAAMO,QCtBlBC,MAOf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,MAEA,yBAAKA,UAAU,qBAEb,uCACA,8DACA,yBAAKA,UAAU,kBACb,kBAACE,EAAD,CAAMG,QAAS,EAAGE,SAfb,IAeiCC,QAdlCD,IAcoDE,IAbxD,IAakEC,KAZjE,IAaD,kBAACR,EAAD,CAAMG,QAAS,EAAGE,SAhBb,IAgBiCC,QAflCD,IAeoDE,IAdxD,IAckEC,KAbjE,QCeIE,MAhBf,WACE,OAEE,kBAAC,IAAD,KAEE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,KACV,kBAAC,EAAD,UCRUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"js/main.1bdf72f8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// Import CSS\r\nimport '../App/App.css';\r\nimport './Header.css';\r\n\r\n\r\nexport default Header;\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"navigation-bar\">\r\n        <div className=\"container-fluid\">\r\n\r\n            <content>\r\n                <a href=\"/\">\r\n                <h2> PKcoin </h2>\r\n                </a>\r\n            </content>\r\n            \r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, {useState} from 'react';\r\n\r\n// Import CSS\r\nimport '../App/App.css';\r\nimport '../Home/Home.css';\r\n\r\nexport default Card;\r\n\r\nfunction Card(props) {\r\n\r\n  let hmm = '';\r\n  if (props.blockNo == 1)\r\n  {\r\n    hmm = '(Genesis block)';\r\n  }\r\n\r\n  return (\r\n    \r\n    <div className=\"card\" id={props.blockNo - 1}>\r\n        <card-body>\r\n        <h3> Block {props.blockNo} </h3> {hmm}\r\n        </card-body>\r\n        <list-items>\r\n        Previous hash<br></br>{props.PrevHash}\r\n        <br></br><br></br>\r\n        Current hash<br></br>{props.CurHash}\r\n        </list-items>\r\n        <list-items>\r\n        Key<br></br>{props.key}\r\n        </list-items>\r\n        <list-items-bruh>\r\n        Timestamp<br></br>{props.time}\r\n        </list-items-bruh>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\n\r\n// Import CSS\r\nimport '../App/App.css';\r\nimport './Home.css';\r\n\r\nimport Header from '../Header/Header';\r\nimport Card from '../Cards/Card';\r\n\r\nexport default Home;\r\n\r\nlet PrevHash = 100;\r\nlet CurHash = PrevHash;\r\nlet key = 100;\r\nlet time = 0;\r\n\r\nfunction Home() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header/>\r\n\r\n      <div className=\"content-container\">\r\n\r\n        <h1> Hello </h1>\r\n        <p> Here are some transactions... </p>\r\n        <div className=\"card-container\">\r\n          <Card blockNo={1} PrevHash={PrevHash} CurHash={CurHash} key={key} time={time} />\r\n          <Card blockNo={2} PrevHash={PrevHash} CurHash={CurHash} key={key} time={time} />\r\n\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\n\nimport './App.css';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport Home from '../Home/Home';\n\nfunction App() {\n  return (\n    \n    <Router>\n\n      <Switch>\n        <Route path=\"/\">\n          <Home/>\n        </Route>\n\n      </Switch>\n\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './Routes/App/App';\nimport Card from './Routes/Cards/Card';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}